{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MovieRating","_ref3","rating","stars","emptyStars","Math","round","index","MoviePoster","_ref4","poster","alt","src","title","Movie","_ref","genres","synopsis","map","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMoives","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","res","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmCA,SAASA,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACnB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAIpC,SAASK,EAATC,GAA+B,IAATC,EAASD,EAATC,OAEhBC,EAAQ,GACRC,EAAa,GACjBF,EAASG,KAAKC,MAAMJ,EAAO,GAC3B,IAAK,IAAIK,EAAQ,EAAGA,EAAQL,EAAQK,IAClCJ,GALW,SAOb,IAAK,IAAII,EAAQ,EAAGA,EAAS,EAAEL,EAASK,IACtCH,GARW,SAWb,OACER,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBI,EAC/BP,EAAAC,EAAAC,cAAA,YAAOM,IAMb,SAASI,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC5B,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBa,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,IA0BlDG,MApFf,SAAAC,GAA0D,IAA1CF,EAA0CE,EAA1CF,MAAOG,EAAmCD,EAAnCC,OAAQN,EAA2BK,EAA3BL,OAAQO,EAAmBF,EAAnBE,SAAUf,EAASa,EAATb,OAC/C,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACU,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEpCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZiB,EAAOE,IAAI,SAACvB,EAAOY,GAClB,OAAOX,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOwB,IAAKZ,OAG1CX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,KAEvBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CACEwB,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCuBLC,6MA5CbC,MAAQ,KAMRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOZ,IAAI,SAAAa,GACnC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,CACLnB,MAAOkB,EAAMlB,MACbH,OAAQqB,EAAME,mBACdd,IAAKY,EAAMG,GACXlB,OAAQe,EAAMf,OACdC,SAAUc,EAAMd,SAChBf,OAAQ6B,EAAM7B,cAMpBiC,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXd,EAAKe,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACVC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAIA,EAAIE,KAAKrB,SACrBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B5BP,KAAKX,8CA+BE,IACCL,EAAWgB,KAAKnB,MAAhBG,OACR,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAW+B,EAAS,MAAQ,gBAC9BA,EAASgB,KAAKlB,gBAAkB,kBAxCvB4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.97f334f4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\nfunction Movie({title, genres, poster, synopsis, rating}) {\n  return(\n    <div className=\"Movie\">\n      <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>      \n      <div className=\"Movie__Column\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => {\n            return <MovieGenre genre={genre} key={index} />\n          })}\n        </div>\n        <div className=\"Movie__Ratings\">\n          <MovieRating rating={rating} />\n        </div>\n        <div className=\"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'\n          />          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MovieGenre({genre}) {\n  return(\n    <span className=\"Movie__Genre\">{genre}</span>\n  )\n};\n\nfunction MovieRating({rating}) {    \n  const star = '★';\n  let stars = '';\n  let emptyStars = '';\n  rating = Math.round(rating/2);\n  for (let index = 0; index < rating; index++) {\n    stars += star;\n  }\n  for (let index = 0; index < (5-rating); index++) {\n    emptyStars += star;    \n  }\n\n  return(\n    <span className=\"Movie__Rating\">{stars}\n      <span>{emptyStars}</span>\n    </span>\n    \n  )  \n}\n\nfunction MoviePoster({poster, alt}) {\n  return(\n    <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt}></img>\n  );\n};\n\n// stateless Component의 propTypes 설정\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired,\n}\n\nMovieRating.propTypes = {\n  rating: PropTypes.number.isRequired,\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {};\n\n  componentDidMount(){\n    this._getMovies();\n  };\n\n  _renderMoives = () => {    \n    const movies = this.state.movies.map(movie => { // 컴포넌트의 key를 index로 쓰면 느리므로 대체\n      return <Movie \n        title={movie.title} \n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        rating={movie.rating}\n      />\n    })\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi(); // await으로 지정한 작업이 끝나기 전까지 다음줄 실행이 지연된다. async 함수 내에서만 동작하는 키워드\n    this.setState({\n      movies\n    })\n  };\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download count')\n      .then(res => res.json()) // 위에 fetch의 res(바이너리 스트림)를 json으로 변환      \n      .then(res => res.data.movies) // 위에 json으로 변환된 response를 출력\n      .catch(err => console.log(err)) // then에서 에러가 있으면 에러를 캐치하기.\n  };\n\n  render() {\n    const { movies } = this.state; // = const movies = this.state.movies;\n    return (      \n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMoives() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}